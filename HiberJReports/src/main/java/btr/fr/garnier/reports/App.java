package btr.fr.garnier.reports;

import btr.fr.garnier.persist.Persist;
import btr.fr.garnier.persist.Selection;
import btr.fr.garnier.model.MachineConsumption;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.xml.JRXmlLoader;

/**
 * Reports generation application based on JasperReports & iReport.
 *
 * @author agarnier
 */
public class App {

    /**
     * Generates a metrics report based on persisted machine consumptions.
     *
     * @param args
     * @throws JRException
     * @throws NoSuchFieldException
     */
    public static void main(String[] args) throws JRException, NoSuchFieldException {

        JasperDesign jspDesign = JRXmlLoader.load("src/main/resources/"
                + "jasperreports/hiberReport.jrxml");
        JasperReport jspReport = JasperCompileManager.compileReport(jspDesign);

        JasperPrint jasperPrint = JasperFillManager.fillReport(jspReport, null,
                new JRBeanCollectionDataSource(App.getPersistedMetrics()));

        JasperExportManager.exportReportToPdfFile(jasperPrint, "src/main/"
                + "resources/jasperreports/hiberReport.pdf");

        JRXlsExporter exporterXls = new JRXlsExporter();
        exporterXls.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
        exporterXls.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, "src/"
                + "main/resources/jasperreports/hiberReport.xls");
        exporterXls.exportReport();

    } // static void maint(String[])

    /**
     * Select metrics on MachineConsumption through BtrPersist.
     *
     * @return A list of metrics based on persisted machine consumptions in
     * BtrPersist.
     * @throws NoSuchFieldException
     */
    private static List<Metric> getPersistedMetrics() throws NoSuchFieldException {
        Map<Field, Selection> allFields = new LinkedHashMap<Field, Selection>();
        allFields.put(MachineConsumption.class.getDeclaredField("category"), Selection.IDGROUP);
        allFields.putAll(App.addSelField(Selection.MMA, "watt", "cpu", "ram"));

        Map<Field, Selection> eachFields = new LinkedHashMap<Field, Selection>();
        eachFields.put(MachineConsumption.class.getDeclaredField("category"), Selection.IDENT);
        eachFields.put(MachineConsumption.class.getDeclaredField("nom"), Selection.GROUP);
        eachFields.putAll(App.addSelField(Selection.MMA, "watt", "cpu", "ram"));

        List parsedMetrics = parseMetrics(Persist.select(MachineConsumption.class, allFields), GroupField.CATEG);
        parsedMetrics.addAll(parseMetrics(Persist.select(MachineConsumption.class, eachFields), GroupField.NAME));
        return parsedMetrics;
    } // List<Metric> getMetrics()

    /**
     * Bind a selection with given fields in a map.
     *
     * @param selection Selection to apply.
     * @param fields Fields to select.
     * @return Map binding selection with each field.
     * @throws NoSuchFieldException
     */
    private static Map<Field, Selection> addSelField(Selection selection, String... fields)
            throws NoSuchFieldException {
        Map<Field, Selection> selectFieldsMap = new LinkedHashMap<Field, Selection>();
        for (String field : fields) {
            selectFieldsMap.put(MachineConsumption.class.getDeclaredField(field), selection);
        } // for
        return selectFieldsMap;
    } // Map<Field, Selection> addMinMaxAvg(Map<Field, Selection>, String...)

    /**
     * Set a metrics list based on list of arrays of objects generated by the
     * Hibernate Projections API, group by the given field.
     *
     * @param list List generated by the Projections API.
     * @param groupField Grouping field.
     * @return List of parsed metrics.
     */
    private static List<Metric> parseMetrics(List<Object[]> list, GroupField groupField) {
        List<Metric> metricsList = new ArrayList<Metric>();
        for (Object[] objects : list) {
            metricsList.add(buildMetric(objects, groupField));
        } // for
        return metricsList;
    } // List<Metric> parseMetrics(List)

    /**
     * Build a metric based on an array of object and a grouping field.
     *
     * @param objects Array of objects giving the metric's attributes.
     * @param groupField Grouping field.
     * @return Built metric.
     * @throws ArrayIndexOutOfBoundsException
     */
    private static Metric buildMetric(Object[] objects, GroupField groupField)
            throws ArrayIndexOutOfBoundsException {
        return new Metric(
                groupField.categoryToType(objects[0].toString()),
                groupField.nameToMachine(objects[1].toString()),
                (Double) objects[2],
                (Double) objects[3],
                (Double) objects[4],
                (Double) objects[5],
                (Double) objects[6],
                (Double) objects[7],
                (Double) objects[8],
                (Double) objects[9],
                (Double) objects[10]);
    } // static Metric buildMetric(Object[], GroupField)
} // class App
